name: PR Build

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross
        if: matrix.platform.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build with cargo
        if: ${{ !matrix.platform.use_cross }}
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Build with cross
        if: matrix.platform.use_cross
        run: cross build --release --target ${{ matrix.platform.target }}

      - name: Package binary
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czf docker-monitor-${{ matrix.platform.name }}.tar.gz docker-monitor
          mv docker-monitor-${{ matrix.platform.name }}.tar.gz ${{ github.workspace }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-monitor-pr-${{ github.event.pull_request.number }}-${{ matrix.platform.name }}
          path: docker-monitor-${{ matrix.platform.name }}.tar.gz
          retention-days: 30

  comment:
    name: Comment on PR
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Comment on PR with download links
        uses: actions/github-script@v8
        with:
          script: |
            const runId = context.runId;
            const repo = context.repo;

            const comment = `## üöÄ PR Build Artifacts

            Build completed successfully for PR #${{ github.event.pull_request.number }}

            ### Download Binaries

            You can download the pre-built binaries for all platforms from the artifacts:

            [üì¶ View All Artifacts](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})

            ### Available Builds
            - ‚úÖ Linux x86_64 (Intel/AMD)
            - ‚úÖ Linux ARM64
            - ‚úÖ macOS x86_64 (Intel)
            - ‚úÖ macOS ARM64 (Apple Silicon)

            ### How to Download
            1. Click the link above
            2. Scroll to the "Artifacts" section at the bottom
            3. Download the artifact for your platform
            4. Extract the archive

            ### Install Example (Linux x86_64)
            \`\`\`bash
            tar xzf docker-monitor-linux-x86_64.tar.gz
            chmod +x docker-monitor
            ./docker-monitor
            \`\`\`

            ---
            *Artifacts will be available for 30 days*`;

            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Build Artifacts')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Comment on build failure
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const runId = context.runId;
            const repo = context.repo;

            const comment = `## ‚ùå PR Build Failed

            The build for PR #${{ github.event.pull_request.number }} has failed.

            [View Build Logs](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})

            Please check the logs and fix any build errors.`;

            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
